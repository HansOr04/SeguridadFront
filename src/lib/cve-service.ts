// src/lib/cve-service.ts
import api from './api';
import { ApiResponse } from '@/types';

export interface CVE {
  _id: string;
  cveId: string;
  description: string;
  publishedDate: string;
  lastModifiedDate: string;
  cvssV3?: {
    baseScore: number;
    baseSeverity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
    vectorString: string;
    attackVector: string;
    attackComplexity: string;
    privilegesRequired: string;
    userInteraction: string;
    scope: string;
    confidentialityImpact: string;
    integrityImpact: string;
    availabilityImpact: string;
  };
  cvssV2?: {
    baseScore: number;
    baseSeverity: string;
    vectorString: string;
    accessVector: string;
    accessComplexity: string;
    authentication: string;
    confidentialityImpact: string;
    integrityImpact: string;
    availabilityImpact: string;
  };
  cwe?: Array<{
    cweId: string;
    description: string;
  }>;
  references: Array<{
    url: string;
    source: string;
    tags?: string[];
  }>;
  configurations?: Array<{
    operator: string;
    cpe23Uri: string;
    versionStartIncluding?: string;
    versionEndExcluding?: string;
  }>;
  vendorComments?: Array<{
    organization: string;
    comment: string;
    lastModified: string;
  }>;
  affectedAssets?: Array<{
    _id: string;
    codigo: string;
    nombre: string;
    vulnerabilityScore: number;
  }>;
  relatedThreats?: Array<{
    _id: string;
    codigo: string;
    nombre: string;
  }>;
  status: 'Active' | 'Rejected' | 'Disputed' | 'Modified';
  sourceIdentifier: string;
}

export interface CVEFilters {
  severity?: string;
  dateRange?: {
    from: string;
    to: string;
  };
  affectsAssets?: boolean;
  score?: {
    min: number;
    max: number;
  };
  search?: string;
}

export interface CVESearchParams {
  keyword?: string;
  cveId?: string;
  cpeMatch?: string;
  cvssV3Severity?: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  cvssV3Score?: {
    min: number;
    max: number;
  };
  lastModStartDate?: string;
  lastModEndDate?: string;
  pubStartDate?: string;
  pubEndDate?: string;
  sourceIdentifier?: string;
  versionStart?: string;
  versionEnd?: string;
  limit?: number;
  offset?: number;
}

export interface CVEStats {
  total: number;
  bySeverity: {
    LOW: number;
    MEDIUM: number;
    HIGH: number;
    CRITICAL: number;
  };
  recentCount: number;
  affectedAssetsCount: number;
  lastSync: string;
  syncStatus: 'success' | 'error' | 'in_progress';
}

export interface SyncStatus {
  isRunning: boolean;
  lastSync: string;
  nextSync: string;
  totalProcessed: number;
  newCVEs: number;
  updatedCVEs: number;
  errors: string[];
  progress: number;
}

export const cveService = {
  // Buscar CVEs
  async searchCVEs(params: CVESearchParams): Promise<ApiResponse<CVE[]>> {
    const response = await api.get<ApiResponse<CVE[]>>('/cve/search', {
      params,
    });
    return response.data;
  },

  // Obtener CVEs recientes
  async getRecentCVEs(limit: number = 50): Promise<CVE[]> {
    const response = await api.get<ApiResponse<CVE[]>>(`/cve/recent?limit=${limit}`);
    return response.data.data!;
  },

  // Obtener CVE por ID
  async getCVEById(cveId: string): Promise<CVE> {
    const response = await api.get<ApiResponse<CVE>>(`/cve/${cveId}`);
    return response.data.data!;
  },

  // Sincronización manual
  async manualSync(): Promise<{
    jobId: string;
    message: string;
    estimatedDuration: number;
  }> {
    const response = await api.post<ApiResponse<{
      jobId: string;
      message: string;
      estimatedDuration: number;
    }>>('/cve/sync/manual');
    return response.data.data!;
  },

  // Obtener estado de sincronización
  async getSyncStatus(): Promise<SyncStatus> {
    const response = await api.get<ApiResponse<SyncStatus>>('/cve/sync/status');
    return response.data.data!;
  },

  // Obtener estadísticas de CVE
  async getStats(): Promise<CVEStats> {
    const response = await api.get<ApiResponse<CVEStats>>('/cve/stats');
    return response.data.data!;
  },

  // Analizar impacto en activos
  async analyzeAssetImpact(cveId: string): Promise<{
    affectedAssets: Array<{
      asset: {
        _id: string;
        codigo: string;
        nombre: string;
        tipo: string;
      };
      matchConfidence: number;
      riskScore: number;
      recommendations: string[];
    }>;
    potentialRisks: Array<{
      riskLevel: string;
      description: string;
      likelihood: number;
    }>;
  }> {
    const response = await api.get<ApiResponse<{
      affectedAssets: Array<{
        asset: {
          _id: string;
          codigo: string;
          nombre: string;
          tipo: string;
        };
        matchConfidence: number;
        riskScore: number;
        recommendations: string[];
      }>;
      potentialRisks: Array<{
        riskLevel: string;
        description: string;
        likelihood: number;
      }>;
    }>>(`/cve/${cveId}/impact`);
    return response.data.data!;
  },

  // Buscar CVEs para un activo específico
  async getCVEsForAsset(assetId: string): Promise<{
    directMatches: CVE[];
    potentialMatches: CVE[];
    riskAssessment: {
      totalRisk: number;
      criticalCount: number;
      highCount: number;
      recommendations: string[];
    };
  }> {
    const response = await api.get<ApiResponse<{
      directMatches: CVE[];
      potentialMatches: CVE[];
      riskAssessment: {
        totalRisk: number;
        criticalCount: number;
        highCount: number;
        recommendations: string[];
      };
    }>>(`/cve/asset/${assetId}`);
    return response.data.data!;
  },

  // Generar reporte de CVE
  async generateReport(params: {
    dateRange: { from: string; to: string };
    includeSeverities: string[];
    includeAffectedAssets: boolean;
    format: 'pdf' | 'excel' | 'json';
  }): Promise<{
    reportId: string;
    downloadUrl: string;
    expiresAt: string;
  }> {
    const response = await api.post<ApiResponse<{
      reportId: string;
      downloadUrl: string;
      expiresAt: string;
    }>>('/cve/report', params);
    return response.data.data!;
  },

  // Suscribirse a alertas de CVE
  async subscribeToAlerts(params: {
    keywords: string[];
    severities: string[];
    assetTypes: string[];
    email: string;
    webhook?: string;
  }): Promise<{
    subscriptionId: string;
    isActive: boolean;
  }> {
    const response = await api.post<ApiResponse<{
      subscriptionId: string;
      isActive: boolean;
    }>>('/cve/alerts/subscribe', params);
    return response.data.data!;
  },

  // Obtener trending CVEs
  async getTrendingCVEs(timeframe: '24h' | '7d' | '30d' = '7d'): Promise<Array<{
    cve: CVE;
    mentions: number;
    trend: 'up' | 'down' | 'stable';
    sources: string[];
  }>> {
    const response = await api.get<ApiResponse<Array<{
      cve: CVE;
      mentions: number;
      trend: 'up' | 'down' | 'stable';
      sources: string[];
    }>>>(`/cve/trending?timeframe=${timeframe}`);
    return response.data.data!;
  },

  // Obtener feed de CVE para dashboard
  async getDashboardFeed(): Promise<{
    latest: CVE[];
    critical: CVE[];
    trending: CVE[];
    stats: CVEStats;
    alerts: Array<{
      cveId: string;
      severity: string;
      affectedAssets: number;
      timestamp: string;
    }>;
  }> {
    const response = await api.get<ApiResponse<{
      latest: CVE[];
      critical: CVE[];
      trending: CVE[];
      stats: CVEStats;
      alerts: Array<{
        cveId: string;
        severity: string;
        affectedAssets: number;
        timestamp: string;
      }>;
    }>>('/cve/dashboard');
    return response.data.data!;
  },
};