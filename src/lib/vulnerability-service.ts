import api from './api';
import { 
  ApiResponse, 
  Vulnerability, 
  CreateVulnerabilityRequest,
  VulnerabilityFilters,
  VulnerabilityStats 
} from '@/types';

export const vulnerabilityService = {
  // Obtener lista paginada
  async getVulnerabilities(params: {
    page?: number;
    limit?: number;
    sort?: string;
  } & VulnerabilityFilters): Promise<ApiResponse<Vulnerability[]>> {
    const response = await api.get<ApiResponse<Vulnerability[]>>('/vulnerabilities', {
      params,
    });
    return response.data;
  },

  // Obtener por ID
  async getVulnerabilityById(id: string): Promise<Vulnerability> {
    const response = await api.get<ApiResponse<Vulnerability>>(`/vulnerabilities/${id}`);
    return response.data.data!;
  },

  // Crear nueva vulnerabilidad
  async createVulnerability(data: CreateVulnerabilityRequest): Promise<Vulnerability> {
    const response = await api.post<ApiResponse<Vulnerability>>('/vulnerabilities', data);
    return response.data.data!;
  },

  // Actualizar vulnerabilidad
  async updateVulnerability(id: string, data: Partial<CreateVulnerabilityRequest>): Promise<Vulnerability> {
    const response = await api.put<ApiResponse<Vulnerability>>(`/vulnerabilities/${id}`, data);
    return response.data.data!;
  },

  // Eliminar vulnerabilidad
  async deleteVulnerability(id: string): Promise<void> {
    await api.delete(`/vulnerabilities/${id}`);
  },

  // Obtener estadísticas
  async getStats(): Promise<VulnerabilityStats> {
    const response = await api.get<ApiResponse<VulnerabilityStats>>('/vulnerabilities/stats');
    return response.data.data!;
  },

  // Obtener vulnerabilidades críticas
  async getCriticalVulnerabilities(): Promise<Vulnerability[]> {
    const response = await api.get<ApiResponse<Vulnerability[]>>('/vulnerabilities/critical');
    return response.data.data!;
  },

  // Obtener por categoría
  async getByCategoria(categoria: string): Promise<Vulnerability[]> {
    const response = await api.get<ApiResponse<Vulnerability[]>>(`/vulnerabilities/categoria/${categoria}`);
    return response.data.data!;
  },

  // Obtener para un activo
  async getForAsset(assetId: string): Promise<Vulnerability[]> {
    const response = await api.get<ApiResponse<Vulnerability[]>>(`/vulnerabilities/activo/${assetId}`);
    return response.data.data!;
  },

  // Mitigar vulnerabilidad
  async mitigate(id: string, data: { fechaMitigacion?: string; observaciones?: string }): Promise<Vulnerability> {
    const response = await api.post<ApiResponse<Vulnerability>>(`/vulnerabilities/${id}/mitigate`, data);
    return response.data.data!;
  },

  // Reabrir vulnerabilidad
  async reopen(id: string): Promise<Vulnerability> {
    const response = await api.post<ApiResponse<Vulnerability>>(`/vulnerabilities/${id}/reopen`);
    return response.data.data!;
  },

  // Escanear vulnerabilidades de un activo
  async scanAsset(assetId: string, scanType: 'basic' | 'comprehensive' = 'basic'): Promise<any> {
    const response = await api.post<ApiResponse>(`/vulnerabilities/scan/${assetId}`, { scanType });
    return response.data.data!;
  },

  // Acciones en lote
  async bulkAction(action: 'mitigate' | 'reopen' | 'delete', vulnerabilityIds: string[], data?: unknown): Promise<any> {
    const response = await api.post<ApiResponse>('/vulnerabilities/bulk-action', {
      action,
      vulnerabilityIds,
      data,
    });
    return response.data.data!;
  },

  // Dashboard stats
  async getDashboardStats(): Promise<any> {
    const response = await api.get<ApiResponse>('/vulnerabilities/dashboard');
    return response.data.data!;
  },
};