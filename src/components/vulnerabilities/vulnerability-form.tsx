'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { CreateVulnerabilityRequest } from '@/types';

const vulnerabilitySchema = z.object({
  codigo: z.string().min(1, 'El código es requerido'),
  nombre: z.string().min(1, 'El nombre es requerido'),
  categoria: z.string().min(1, 'La categoría es requerida'),
  descripcion: z.string().min(1, 'La descripción es requerida'),
  facilidadExplotacion: z.number().min(0).max(10),
  vectoresAtaque: z.array(z.string()).min(1, 'Al menos un vector de ataque es requerido'),
  afectaA: z.array(z.string()),
  estado: z.enum(['Activa', 'Mitigada', 'Aceptada', 'En Tratamiento']).optional(),
});

type VulnerabilityFormData = z.infer<typeof vulnerabilitySchema>;

interface VulnerabilityFormProps {
  initialData?: Partial<CreateVulnerabilityRequest>;
  onSubmit: (data: CreateVulnerabilityRequest) => void;
  isLoading?: boolean;
}

const CATEGORIAS = [
  'Configuración',
  'Hardware', 
  'Software',
  'Red',
  'Física',
  'Humana',
];

const VECTORES_ATAQUE = [
  'Red',
  'Local',
  'Físico',
  'Social',
  'Email',
  'Web',
  'Inalámbrico',
];

export function VulnerabilityForm({ initialData, onSubmit, isLoading }: VulnerabilityFormProps) {
  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors },
  } = useForm<VulnerabilityFormData>({
    resolver: zodResolver(vulnerabilitySchema),
    defaultValues: {
      codigo: initialData?.codigo || '',
      nombre: initialData?.nombre || '',
      categoria: initialData?.categoria || '',
      descripcion: initialData?.descripcion || '',
      facilidadExplotacion: initialData?.facilidadExplotacion || 5,
      vectoresAtaque: initialData?.vectoresAtaque || [],
      afectaA: initialData?.afectaA || [],
      estado: initialData?.estado || 'Activa',
    },
  });

  const vectoresAtaque = watch('vectoresAtaque');

  const handleVectorChange = (vector: string, checked: boolean) => {
    const current = vectoresAtaque || [];
    if (checked) {
      setValue('vectoresAtaque', [...current, vector]);
    } else {
      setValue('vectoresAtaque', current.filter(v => v !== vector));
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="codigo">Código *</Label>
          <Input
            id="codigo"
            {...register('codigo')}
            placeholder="VULN-001"
          />
          {errors.codigo && (
            <p className="text-sm text-red-500">{errors.codigo.message}</p>
          )}
        </div>

        <div className="space-y-2">
          <Label htmlFor="categoria">Categoría *</Label>
          <Select
            value={watch('categoria')}
            onValueChange={(value) => setValue('categoria', value)}
          >
            <SelectTrigger>
              <SelectValue placeholder="Seleccionar categoría" />
            </SelectTrigger>
            <SelectContent>
              {CATEGORIAS.map((categoria) => (
                <SelectItem key={categoria} value={categoria}>
                  {categoria}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {errors.categoria && (
            <p className="text-sm text-red-500">{errors.categoria.message}</p>
          )}
        </div>
      </div>

      <div className="space-y-2">
        <Label htmlFor="nombre">Nombre *</Label>
        <Input
          id="nombre"
          {...register('nombre')}
          placeholder="Nombre descriptivo de la vulnerabilidad"
        />
        {errors.nombre && (
          <p className="text-sm text-red-500">{errors.nombre.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="descripcion">Descripción *</Label>
        <Textarea
          id="descripcion"
          {...register('descripcion')}
          placeholder="Descripción detallada de la vulnerabilidad"
          rows={4}
        />
        {errors.descripcion && (
          <p className="text-sm text-red-500">{errors.descripcion.message}</p>
        )}
      </div>

      <div className="space-y-2">
        <Label htmlFor="facilidadExplotacion">
          Facilidad de Explotación: {watch('facilidadExplotacion')}
        </Label>
        <input
          type="range"
          id="facilidadExplotacion"
          min="0"
          max="10"
          step="1"
          {...register('facilidadExplotacion', { valueAsNumber: true })}
          className="w-full"
        />
        <div className="flex justify-between text-xs text-muted-foreground">
          <span>Muy Difícil (0)</span>
          <span>Muy Fácil (10)</span>
        </div>
      </div>

      <div className="space-y-2">
        <Label>Vectores de Ataque *</Label>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
          {VECTORES_ATAQUE.map((vector) => (
            <label key={vector} className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={vectoresAtaque?.includes(vector) || false}
                onChange={(e) => handleVectorChange(vector, e.target.checked)}
                className="rounded"
              />
              <span className="text-sm">{vector}</span>
            </label>
          ))}
        </div>
        {errors.vectoresAtaque && (
          <p className="text-sm text-red-500">{errors.vectoresAtaque.message}</p>
        )}
      </div>

      {initialData && (
        <div className="space-y-2">
          <Label>Estado</Label>
          <Select
            value={watch('estado')}
            onValueChange={(value) => setValue('estado', value as any)}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Activa">Activa</SelectItem>
              <SelectItem value="Mitigada">Mitigada</SelectItem>
              <SelectItem value="Aceptada">Aceptada</SelectItem>
              <SelectItem value="En Tratamiento">En Tratamiento</SelectItem>
            </SelectContent>
          </Select>
        </div>
      )}

      <div className="flex justify-end space-x-2">
        <Button type="button" variant="outline">
          Cancelar
        </Button>
        <Button type="submit" disabled={isLoading}>
          {isLoading ? 'Guardando...' : initialData ? 'Actualizar' : 'Crear'}
        </Button>
      </div>
    </form>
  );
}