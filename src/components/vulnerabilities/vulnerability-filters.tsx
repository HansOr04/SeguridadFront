'use client';

import { useState } from 'react';
import { Search, Filter, X } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { VulnerabilityFilters } from '@/types';

interface VulnerabilityFiltersProps {
  filters: VulnerabilityFilters;
  onFiltersChange: (filters: VulnerabilityFilters) => void;
}

const CATEGORIAS = [
  'Configuración',
  'Hardware',
  'Software',
  'Red',
  'Física',
  'Humana',
];

const ESTADOS = [
  'Activa',
  'Mitigada',
  'Aceptada',
  'En Tratamiento',
];

const FACILIDADES = [
  { value: '8', label: 'Crítica (8-10)' },
  { value: '6', label: 'Alta (6-7)' },
  { value: '4', label: 'Media (4-5)' },
  { value: '2', label: 'Baja (2-3)' },
  { value: '0', label: 'Muy Baja (0-1)' },
];

export function VulnerabilityFiltersComponent({ filters, onFiltersChange }: VulnerabilityFiltersProps) {
  const [isExpanded, setIsExpanded] = useState(false);

  const updateFilter = (key: keyof VulnerabilityFilters, value: string | undefined) => {
    onFiltersChange({
      ...filters,
      [key]: value || undefined,
    });
  };

  const clearFilters = () => {
    onFiltersChange({});
  };

  const activeFiltersCount = Object.values(filters).filter(Boolean).length;

  return (
    <div className="space-y-4">
      {/* Búsqueda principal */}
      <div className="flex items-center space-x-2">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
          <Input
            placeholder="Buscar vulnerabilidades..."
            value={filters.search || ''}
            onChange={(e) => updateFilter('search', e.target.value)}
            className="pl-10"
          />
        </div>
        <Button
          variant="outline"
          onClick={() => setIsExpanded(!isExpanded)}
          className="shrink-0"
        >
          <Filter className="mr-2 h-4 w-4" />
          Filtros
          {activeFiltersCount > 0 && (
            <Badge variant="secondary" className="ml-2">
              {activeFiltersCount}
            </Badge>
          )}
        </Button>
        {activeFiltersCount > 0 && (
          <Button variant="ghost" size="sm" onClick={clearFilters}>
            <X className="h-4 w-4" />
          </Button>
        )}
      </div>

      {/* Filtros expandidos */}
      {isExpanded && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 border rounded-lg bg-muted/50">
          <div className="space-y-2">
            <label className="text-sm font-medium">Categoría</label>
            <Select
              value={filters.categoria || ''}
              onValueChange={(value) => updateFilter('categoria', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Todas las categorías" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">Todas las categorías</SelectItem>
                {CATEGORIAS.map((categoria) => (
                  <SelectItem key={categoria} value={categoria}>
                    {categoria}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Estado</label>
            <Select
              value={filters.estado || ''}
              onValueChange={(value) => updateFilter('estado', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Todos los estados" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">Todos los estados</SelectItem>
                {ESTADOS.map((estado) => (
                  <SelectItem key={estado} value={estado}>
                    {estado}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <label className="text-sm font-medium">Severidad</label>
            <Select
              value={filters.facilidad || ''}
              onValueChange={(value) => updateFilter('facilidad', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Todas las severidades" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="">Todas las severidades</SelectItem>
                {FACILIDADES.map((facilidad) => (
                  <SelectItem key={facilidad.value} value={facilidad.value}>
                    {facilidad.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      )}
    </div>
  );
}