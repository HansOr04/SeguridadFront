'use client';

import { useState } from 'react';
import Link from 'next/link';
import { 
  Eye, 
  Edit, 
  Trash2, 
  Shield, 
  ShieldX, 
  MoreHorizontal,
  Calendar
} from 'lucide-react';

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { SeverityBadge } from './severity-badge';
import { StatusBadge } from './status-badge';
import { Vulnerability } from '@/types';
import { formatDate } from '@/lib/utils';
import { useVulnerabilityMutations } from '@/hooks/use-vulnerabilities';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  selectedIds: string[];
  onSelectionChange: (ids: string[]) => void;
}

export function VulnerabilityTable({ 
  vulnerabilities, 
  selectedIds, 
  onSelectionChange 
}: VulnerabilityTableProps) {
  const { mitigate, reopen, delete: deleteVuln } = useVulnerabilityMutations();

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      onSelectionChange(vulnerabilities.map(v => v._id));
    } else {
      onSelectionChange([]);
    }
  };

  const handleSelectOne = (id: string, checked: boolean) => {
    if (checked) {
      onSelectionChange([...selectedIds, id]);
    } else {
      onSelectionChange(selectedIds.filter(selectedId => selectedId !== id));
    }
  };

  const handleMitigate = (id: string) => {
    mitigate({ 
      id, 
      data: { fechaMitigacion: new Date().toISOString() }
    });
  };

  const handleReopen = (id: string) => {
    reopen(id);
  };

  const handleDelete = (id: string) => {
    if (confirm('¿Está seguro de que desea eliminar esta vulnerabilidad?')) {
      deleteVuln(id);
    }
  };

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-12">
              <Checkbox
                checked={selectedIds.length === vulnerabilities.length && vulnerabilities.length > 0}
                onCheckedChange={handleSelectAll}
              />
            </TableHead>
            <TableHead>Código</TableHead>
            <TableHead>Nombre</TableHead>
            <TableHead>Categoría</TableHead>
            <TableHead>Severidad</TableHead>
            <TableHead>Estado</TableHead>
            <TableHead>Activos Afectados</TableHead>
            <TableHead>Fecha Detección</TableHead>
            <TableHead className="w-12"></TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerabilities.length === 0 ? (
            <TableRow>
              <TableCell colSpan={9} className="text-center py-8 text-muted-foreground">
                No se encontraron vulnerabilidades
              </TableCell>
            </TableRow>
          ) : (
            vulnerabilities.map((vulnerability) => (
              <TableRow key={vulnerability._id}>
                <TableCell>
                  <Checkbox
                    checked={selectedIds.includes(vulnerability._id)}
                    onCheckedChange={(checked) => 
                      handleSelectOne(vulnerability._id, checked as boolean)
                    }
                  />
                </TableCell>
                <TableCell className="font-medium">
                  <Link 
                    href={`/dashboard/vulnerabilidades/${vulnerability._id}`}
                    className="text-primary hover:underline"
                  >
                    {vulnerability.codigo}
                  </Link>
                </TableCell>
                <TableCell>
                  <div className="max-w-[200px] truncate" title={vulnerability.nombre}>
                    {vulnerability.nombre}
                  </div>
                </TableCell>
                <TableCell>{vulnerability.categoria}</TableCell>
                <TableCell>
                  <SeverityBadge facilidadExplotacion={vulnerability.facilidadExplotacion} />
                </TableCell>
                <TableCell>
                  <StatusBadge estado={vulnerability.estado} />
                </TableCell>
                <TableCell>
                  <span className="text-sm text-muted-foreground">
                    {vulnerability.afectaA?.length || 0} activos
                  </span>
                </TableCell>
                <TableCell>
                  <div className="flex items-center text-sm text-muted-foreground">
                    <Calendar className="mr-1 h-3 w-3" />
                    {formatDate(vulnerability.fechaDeteccion)}
                  </div>
                </TableCell>
                <TableCell>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-8 w-8 p-0">
                        <MoreHorizontal className="h-4 w-4" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="end">
                      <DropdownMenuLabel>Acciones</DropdownMenuLabel>
                      <DropdownMenuSeparator />
                      <DropdownMenuItem asChild>
                        <Link href={`/dashboard/vulnerabilidades/${vulnerability._id}`}>
                          <Eye className="mr-2 h-4 w-4" />
                          Ver Detalles
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuItem asChild>
                        <Link href={`/dashboard/vulnerabilidades/${vulnerability._id}/editar`}>
                          <Edit className="mr-2 h-4 w-4" />
                          Editar
                        </Link>
                      </DropdownMenuItem>
                      <DropdownMenuSeparator />
                      {vulnerability.estado === 'Activa' ? (
                        <DropdownMenuItem onClick={() => handleMitigate(vulnerability._id)}>
                          <Shield className="mr-2 h-4 w-4" />
                          Mitigar
                        </DropdownMenuItem>
                      ) : (
                        <DropdownMenuItem onClick={() => handleReopen(vulnerability._id)}>
                          <ShieldX className="mr-2 h-4 w-4" />
                          Reabrir
                        </DropdownMenuItem>
                      )}
                      <DropdownMenuSeparator />
                      <DropdownMenuItem 
                        onClick={() => handleDelete(vulnerability._id)}
                        className="text-red-600"
                      >
                        <Trash2 className="mr-2 h-4 w-4" />
                        Eliminar
                      </DropdownMenuItem>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </TableCell>
              </TableRow>
            ))
          )}
        </TableBody>
      </Table>
    </div>
  );
}